#  Copyright 2023-2024 Dataport AÃ¶R
#
#  Licensed under the Apache License, Version 2.0 (the "License");
#  you may not use this file except in compliance with the License.
#  You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.

apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ include "daps-server.fullname" . }}
  labels:
    {{- include "daps-server.labels" . | nindent 4 }}
spec:
  serviceName: "{{ include "daps-server.fullname" . }}"
  selector:
    matchLabels:
      {{- include "daps-server.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      annotations:        
      {{- with .Values.podAnnotations }}
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        {{- include "daps-server.selectorLabels" . | nindent 8 }}
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}      
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      containers:        
        - name: daps-server
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          ports:            
            - name: http
              containerPort: {{ .Values.service.port }}
              protocol: TCP            
          {{- if .Values.command }}
          command:
            {{- toYaml .Values.command | nindent 12 }}
          {{- end }}
          {{- if .Values.args }}
          args:
            {{- toYaml .Values.args | nindent 12 }}
          {{- end }}
          #livenessProbe:
          #  httpGet:
          #    path: /
          #    port: http
          #readinessProbe:
          #  httpGet:
          #    path: /
          #    port: http
          {{- if .Values.env }}
          env:
            {{- range $key, $value := .Values.env }}
            - name: "{{ $key }}"
              value: "{{ $value }}"
            {{- end }} 
          {{- end }}
          {{- if .Values.envFromSecret }}
          envFrom:
            {{- range $secret := .Values.envFromSecret }}
            - secretRef:
                name: "{{ $secret }}"
            {{- end }} 
          {{- end }}
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
          volumeMounts:
          - name: config
            mountPath: /opt/config
            subPath: config
          - name: config
            mountPath: /opt/keys
            subPath: keys          
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
  volumeClaimTemplates:
    - apiVersion: v1	
      kind: PersistentVolumeClaim
      metadata:
        name: config
        labels:
          {{- include "daps-server.labels" . | nindent 8 }}
      spec:
        accessModes:
          - {{ .Values.persistence.accessMode | default "ReadWriteOnce" }}
        storageClassName: {{ .Values.persistence.storageClass }}
        resources:
          requests:
            storage: {{ .Values.persistence.storageSize }}  